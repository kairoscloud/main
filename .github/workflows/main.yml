name: 2amTokenUpdate

on:
  schedule:
    - cron: "0 6 * * *" # Runs at 6:00 UTC everyday (2am EST)
  workflow_dispatch: # Allows manual execution

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install firebase-admin

      - name: Run script
        run: |
          node -e "
          const admin = require('firebase-admin');

          const serviceAccount = require('./key.json'); // Path to firebase credentials

          admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            apiKey: 'AIzaSyAkvl6HKgup1AofIrUU_Q7b4RlvhI2QTpc',
            authDomain: 'kairos-test-eedd6.firebaseapp.com',
            projectId: 'kairos-test-eedd6',
            storageBucket: 'kairos-test-eedd6.appspot.com',
            messagingSenderId: '34445244935',
            appId: '1:34445244935:web:b4ed7e9be70c16251d88a2',
            measurementId: 'G-M1BXTKSG3B',
          });

          const firestore = admin.firestore();

          const tokensRef = firestore.collection('tokens'); // the 'tokens' collection in firestore
          let globalRefreshToken = '';

          async function getGlobalRefreshToken() {
            const docRef = tokensRef.doc('agency');
            const docSnap = await docRef.get();
            //console.log('GRT: ' + docSnap.data().refreshToken);
            globalRefreshToken = docSnap.data().refreshToken;
          }

          getGlobalRefreshToken().then(() => {
            // grab the refresh token from firebase to generate a new one
            getAgencyAccessToken().then((result) => {
              tokensRef.doc('agency').update({
                // these fields only apply for the 'agency' document. The rest are locations.
                agencyAccessToken: result.access_token,
                refreshToken: result.refresh_token,
                timestamp: admin.firestore.FieldValue.serverTimestamp(), // log timestamp for debugging
              });

              tokensRef
                .get()
                .then((querySnapshot) => {
                  const updatePromises = [];
                  querySnapshot.forEach((doc) => {
                    // for each firebase entry (except agency)
                    if (doc.id != 'agency') {
                      const docRef = tokensRef.doc(doc.id);
                      updatePromises.push(
                        getLocationAccessToken(result.access_token, doc.id)
                          .then((locationAccessToken) => {
                            // Update each location with retrieved access token
                            return docRef.update({ locationAccessToken });
                          })
                          .catch((err) => {
                            console.error('Error getting access token for:', doc.id, err);
                          }),
                      );
                    }
                  });

                  return Promise.all(updatePromises); // Wait for all updates to finish
                })
                .then(() => {
                  console.log('All tokens updated successfully!');
                })
                .catch((err) => {
                  console.error('Error getting documents:', err);
                });
            });
          });

          async function getAgencyAccessToken() {
            const url = 'https://services.leadconnectorhq.com/oauth/token';
            const options = {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                Accept: 'application/json',
              },
              body: new URLSearchParams({
                client_id: '65d907b2cca7ce7d6cbd8dae-lsz5yrln',
                client_secret: 'b6e90c29-dce0-4acd-8d96-269ee936d0aa',
                grant_type: 'refresh_token',
                code: '',
                refresh_token: globalRefreshToken, // previous refresh token we took from firebase earlier
                user_type: 'Company',
                redirect_uri: 'https://oauth.kairoscloud.io/url-redirect',
              }),
            };

            try {
              const response = await fetch(url, options);
              const data = await response.json();
              console.log(data);
              return data;
            } catch (error) {
              console.error(error);
            }
          }

          async function getLocationAccessToken(token, location) {
            const url = 'https://services.leadconnectorhq.com/oauth/locationToken';
            const options = {
              method: 'POST',
              headers: {
                Version: '2021-07-28',
                'Content-Type': 'application/x-www-form-urlencoded',
                Accept: 'application/json',
                Authorization: 'Bearer ' + token,
              },
              body: new URLSearchParams({
                companyId: 'eRzyNWgO7fUGsvSQv7eR',
                locationId: location,
              }),
            };

            try {
              const response = await fetch(url, options);
              const data = await response.json();
              console.log(data);
              return data.access_token;
              //console.log(data);
            } catch (error) {
              console.error(error);
            }
          }

          "
